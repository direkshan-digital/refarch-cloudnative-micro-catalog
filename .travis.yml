sudo: required
language: java
jdk:
  - openjdk8
env:
  global:
    - IMAGE_NAME=bluecompute-catalog
    - RELEASE_NAME=catalog
    - TAG=travis-latest
stages:
  - local build and test
  - docker build, deploy, and test
  - kubernetes build, deploy, and test
jobs:
  include:
    - stage: local build and test
      services:
      - elasticsearch
      - mysql
      - docker
      before_cache:
        - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
        - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
      before_script:
      # Get script with inventory data
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/spring/scripts/mysql_data.sql
      # Wait for MySQL to start, then load it with catalog data
      - until mysql -h 127.0.0.1 -P 3306 -uroot <mysql_data.sql; do echo "waiting for mysql"; sleep 1; done; echo "Loaded data into database"
      # Start inventory container
      - docker run --net=host --name inventory -d -p 8080:8080 -e MYSQL_URI="mysql://root@127.0.0.1:3306/inventorydb" ibmcase/bluecompute-inventory:0.5.0
      # Wait for elasticsearch and inventory to start
      - sleep 25
      # Test Inventory
      - curl http://127.0.0.1:8080/micro/inventory
      script:
      # Gradle Build
      - ./gradlew build -x test
      # Start Application
      - java -jar build/libs/micro-catalog-0.0.1.jar &
      # Wait for the Inventory container to start accepting connections
      - sleep 25
      # Run Catalog API Test
      - bash scripts/api_tests.sh 127.0.0.1 8081
    - stage: docker build, deploy, and test
      services:
      - elasticsearch
      - mysql
      - docker
      install:
        - true
      before_script:
      # Get script with inventory data
      - wget https://raw.githubusercontent.com/ibm-cloud-architecture/refarch-cloudnative-micro-inventory/spring/scripts/mysql_data.sql
      # Wait for MySQL to start, then load it with catalog data
      - until mysql -h 127.0.0.1 -P 3306 -uroot <mysql_data.sql; do echo "waiting for mysql"; sleep 1; done; echo "Loaded data into database"
      # Start inventory container
      - docker run --net=host --name inventory -d -p 8080:8080 -e MYSQL_URI="mysql://root@127.0.0.1:3306/inventorydb" ibmcase/bluecompute-inventory:0.5.0
      # Wait for elasticsearch and inventory to start
      - sleep 25
      # Test Inventory
      - curl http://127.0.0.1:8080/micro/inventory
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Start Catalog Container and Connect to local MySQL Service
      - docker run --net=host --name catalog -e ELASTICSEARCH_URI="http://127.0.0.1:9200" -e INVENTORY_URL="http://127.0.0.1:8080" -p 8081:8081 -d "${IMAGE_NAME}:${TAG}"
      # Wait for the Catalog container to start accepting connections
      - sleep 25
      # Check that the Catalog container is running
      - docker ps
      # Check logs to see if it started properly
      - docker logs catalog
      # Run Catalog API Test
      - bash scripts/api_tests.sh 127.0.0.1 8081
    - stage: kubernetes build, deploy, and test
      services:
      - docker
      env:
      - CHANGE_MINIKUBE_NONE_USER=true
      install:
        - true
      before_script:
      # Install nsenter, which is needed for minikube to work
      - bash scripts/install_minikube_and_helm.sh
      # Install Elasticsearch Chart
      - helm upgrade --install elasticsearch --version 1.13.2 --set fullnameOverride=catalog-elasticsearch,cluster.env.MINIMUM_MASTER_NODES="2",client.replicas=1,master.replicas=2,master.persistence.enabled=false,data.replicas=1,data.persistence.enabled=false stable/elasticsearch
      # Install MySQL Chart
      - helm upgrade --install mysql --version 0.10.2 --set fullnameOverride=inventory-mysql,mysqlRootPassword=admin123,mysqlUser=dbuser,mysqlPassword=password,mysqlDatabase=inventorydb,persistence.enabled=false stable/mysql
      # Install Inventory Chart
      - helm upgrade --install inventory --set mysql.existingSecret=inventory-mysql ibmcase-charts/inventory
      script:
      # Build Docker image
      - docker build -t "${IMAGE_NAME}:${TAG}" .
      # Download Catalog chart dependencies (MySQL)
      - cd chart/catalog; helm dependency update; cd ../..
      # helm lint
      - helm lint chart/catalog
      # helm package
      - helm package chart/catalog
      # helm install Catalog from packaged chart. Use pullPolicy=Never so it uses local docker image
      - CHART_VERSION="$(cat chart/catalog/Chart.yaml | grep version | awk '{print $2}')"
      - helm upgrade --install catalog --set service.type=NodePort,image.repository="${IMAGE_NAME}",image.tag="${TAG}",image.pullPolicy=Never,elasticsearch.host=catalog-elasticsearch-client,inventory.url=http://inventory-inventory:8080 catalog-${CHART_VERSION}.tgz
      # Wait for Catalog to be ready
      - kubectl get deployments ${RELEASE_NAME}-catalog -o yaml
      - READY=$(kubectl get deployments ${RELEASE_NAME}-catalog -o yaml | grep "readyReplicas" | awk '{print $2}')
      - echo $READY
      - until [ -n "$READY" ] && [ ${READY} -ge 1 ]; do READY=$(kubectl get deployments ${RELEASE_NAME}-catalog -o yaml | grep "readyReplicas" | awk '{print $2}'); kubectl get deployments -o wide; echo "Waiting for catalog to be ready"; sleep 10; done
      # Wait for Catalog deployment to start accepting connections
      - sleep 35
      # Run Catalog API Test
      - MINIKUBE_IP=$(minikube ip)
      - NODE_PORT=$(kubectl get service ${RELEASE_NAME}-catalog -o=jsonpath='{.spec.ports[0].nodePort}')
      - bash scripts/api_tests.sh $MINIKUBE_IP $NODE_PORT